{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Vets Who Code Engineering Standard Operating Procedures (SOPs) A veteran transitioning into software engineering through Vets Who Code... Has responsibilities to their unit \u2013 mentor, coach, and lead. Knows their SOPs . Follows their SOPs. Improves their SOPs if they are inefficient. If they find better SOPs, they incorporate them. If somebody could use their SOPs, they share them. Leads by example. Models the behaviors we desire both interpersonally and technically. Strives to understand how their work fits into a broader context and ensures mission success. These are our Standard Operating Procedures for Software Engineering Core Fundamentals. All contributions are welcome! Please feel free to submit a pull request to get involved. Why Have SOPs To increase overall efficiency for the entire Vets Who Code community. To reduce the number of errors and avoid common pitfalls in the transition of becoming software engineers. To strive to be better engineers and learn from shared experiences so we can flatten each others growth curve. To establish a consistent, high-quality approach to software development tasks. If you do nothing else, follow the Engineering Fundamentals Checklist! (Link to be added) Collection I: Core Fundamentals This collection of units and modules covers essential topics for software development. It equips you with the necessary skills and knowledge to build a strong foundation in coding, applicable across various programming domains. We're starting with the most fundamental modules, with more to come as we build out our curriculum. Core Training Modules Command Center: Mastering Command Line and Bash Master your primary interface for commanding computer operations Learn to navigate file systems, manipulate data, and automate tasks efficiently Understand the power of text-based computer interaction Harness the full potential of Bash scripting for task automation and system management Mission Control: Git and GitHub Understand version control concepts and their importance in modern software development Learn to track changes, collaborate with others, and manage your codebase effectively Master the art of branching, merging, and resolving conflicts Utilize GitHub for project management, collaboration, and showcasing your work","title":"Home"},{"location":"#vets-who-code-engineering-standard-operating-procedures-sops","text":"A veteran transitioning into software engineering through Vets Who Code... Has responsibilities to their unit \u2013 mentor, coach, and lead. Knows their SOPs . Follows their SOPs. Improves their SOPs if they are inefficient. If they find better SOPs, they incorporate them. If somebody could use their SOPs, they share them. Leads by example. Models the behaviors we desire both interpersonally and technically. Strives to understand how their work fits into a broader context and ensures mission success. These are our Standard Operating Procedures for Software Engineering Core Fundamentals. All contributions are welcome! Please feel free to submit a pull request to get involved.","title":"Vets Who Code Engineering Standard Operating Procedures (SOPs)"},{"location":"#why-have-sops","text":"To increase overall efficiency for the entire Vets Who Code community. To reduce the number of errors and avoid common pitfalls in the transition of becoming software engineers. To strive to be better engineers and learn from shared experiences so we can flatten each others growth curve. To establish a consistent, high-quality approach to software development tasks. If you do nothing else, follow the Engineering Fundamentals Checklist! (Link to be added)","title":"Why Have SOPs"},{"location":"#collection-i-core-fundamentals","text":"This collection of units and modules covers essential topics for software development. It equips you with the necessary skills and knowledge to build a strong foundation in coding, applicable across various programming domains. We're starting with the most fundamental modules, with more to come as we build out our curriculum.","title":"Collection I: Core Fundamentals"},{"location":"#core-training-modules","text":"Command Center: Mastering Command Line and Bash Master your primary interface for commanding computer operations Learn to navigate file systems, manipulate data, and automate tasks efficiently Understand the power of text-based computer interaction Harness the full potential of Bash scripting for task automation and system management Mission Control: Git and GitHub Understand version control concepts and their importance in modern software development Learn to track changes, collaborate with others, and manage your codebase effectively Master the art of branching, merging, and resolving conflicts Utilize GitHub for project management, collaboration, and showcasing your work","title":"Core Training Modules"}]}