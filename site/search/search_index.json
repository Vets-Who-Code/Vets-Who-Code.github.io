{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Vets Who Code Engineering Standard Operating Procedures (SOPs) \ud83c\uddfa\ud83c\uddf8 A veteran transitioning into software engineering through Vets Who Code... Has responsibilities to their unit \u2013 mentor, coach, and lead. Knows their SOPs . Follows their SOPs. Improves their SOPs if they are inefficient. If they find better SOPs, they incorporate them. If somebody could use their SOPs, they share them. Leads by example. Models the behaviors we desire both interpersonally and technically. Strives to understand how their work fits into a broader context and ensures mission success. These are our Standard Operating Procedures for Software Engineering as a Vets Who Code Troop. All contributions are welcome! Please feel free to submit a pull request to get involved. Why Have SOPs To increase overall efficiency for the entire Vets Who Code community. To reduce the number of errors and avoid common pitfalls in the transition of becoming software engineers. To strive to be better engineers and learn from shared experiences so we can flatten each others growth curve. To establish a consistent, high-quality approach to software development tasks. Core Values: Our Guiding Principles \ud83c\uddfa\ud83c\uddf8 In the military, we focus on Integrity, Service, and Excellence - in that order. These core values are just as crucial in our mission to become outstanding software engineers: Integrity First : In code as in combat, honesty is our bedrock. Write clean, readable code that tells the truth about its function. Admit to mistakes and learn from them. Debug with determination and transparency. Give credit where it's due in your commits and collaborations. Service Before Self : Your code serves your team, your users, and the larger mission. Prioritize maintainable, scalable solutions over quick personal wins. Contribute to open-source projects and support your fellow coders. Always consider the end-user experience in your development decisions. Excellence In All We Do : Strive for continuous improvement in your coding skills. Regularly refactor and optimize your code. Good enough is never enough. Stay updated with the latest technologies and best practices in our field. Share your knowledge. Teaching others reinforces your own excellence. Remember, troop: these values are your compass in the ever-changing terrain of technology. Let them guide every line of code you write and every pull request you review. General Guidance: Your Tech Boot Camp Field Manual \ud83c\uddfa\ud83c\uddf8 Maintain high standards in your code, soldier! Use GitHub's code review system like a buddy check before a jump \u2013 it ensures your code is mission-ready. Quality over speed, trooper. A well-planned assault beats a hasty advance. Craft your code with precision. Focus on one objective at a time. Use GitHub Projects like a mission board to prioritize your targets. Communication is key in our distributed unit. Use GitHub's wiki as your field manual, discussions for intel sharing, and issues to log mission objectives. K.I.S.S. - Keep It Simple, Soldier! Deploy basic, working solutions first. Use branches like you'd use different formations \u2013 test new maneuvers before integrating them into the main force. Stick to the mission parameters. If new intel comes in, create a new GitHub issue instead of changing the current mission objectives. Advance in small, tactical moves. Use GitHub releases to deploy frequent, incremental updates. Remember, inch by inch, anything's a cinch! Keep your squad informed. Update GitHub issues and pull requests like you'd update your team on the field. Clear intel keeps the unit aligned. Report bugs like you'd call in artillery \u2013 use GitHub issues with clear coordinates (steps to reproduce) and terrain details (code snippets or screenshots). We're all in this together, soldiers. The entire codebase is our base camp \u2013 we all have a duty to maintain and improve it. Use GitHub Actions like your automated supply line \u2013 it ensures your code is always ready for deployment. Standardize your approach with GitHub's templates. They're like field-tested battle plans \u2013 use them to make everyone's mission easier. Remember, troops: these tools are your high-tech gear. They turn our distributed unit into a lean, mean, coding machine. Master them, and you'll be debugging like a pro and deploying code like a seasoned cyber warrior in no time. Stay frosty, keep coding, and let's show them what Vets Who Code can do! HUA! \ud83c\uddfa\ud83c\uddf8","title":"Home"},{"location":"#vets-who-code-engineering-standard-operating-procedures-sops","text":"A veteran transitioning into software engineering through Vets Who Code... Has responsibilities to their unit \u2013 mentor, coach, and lead. Knows their SOPs . Follows their SOPs. Improves their SOPs if they are inefficient. If they find better SOPs, they incorporate them. If somebody could use their SOPs, they share them. Leads by example. Models the behaviors we desire both interpersonally and technically. Strives to understand how their work fits into a broader context and ensures mission success. These are our Standard Operating Procedures for Software Engineering as a Vets Who Code Troop. All contributions are welcome! Please feel free to submit a pull request to get involved.","title":"Vets Who Code Engineering Standard Operating Procedures (SOPs) \ud83c\uddfa\ud83c\uddf8"},{"location":"#why-have-sops","text":"To increase overall efficiency for the entire Vets Who Code community. To reduce the number of errors and avoid common pitfalls in the transition of becoming software engineers. To strive to be better engineers and learn from shared experiences so we can flatten each others growth curve. To establish a consistent, high-quality approach to software development tasks.","title":"Why Have SOPs"},{"location":"#core-values-our-guiding-principles","text":"In the military, we focus on Integrity, Service, and Excellence - in that order. These core values are just as crucial in our mission to become outstanding software engineers: Integrity First : In code as in combat, honesty is our bedrock. Write clean, readable code that tells the truth about its function. Admit to mistakes and learn from them. Debug with determination and transparency. Give credit where it's due in your commits and collaborations. Service Before Self : Your code serves your team, your users, and the larger mission. Prioritize maintainable, scalable solutions over quick personal wins. Contribute to open-source projects and support your fellow coders. Always consider the end-user experience in your development decisions. Excellence In All We Do : Strive for continuous improvement in your coding skills. Regularly refactor and optimize your code. Good enough is never enough. Stay updated with the latest technologies and best practices in our field. Share your knowledge. Teaching others reinforces your own excellence. Remember, troop: these values are your compass in the ever-changing terrain of technology. Let them guide every line of code you write and every pull request you review.","title":"Core Values: Our Guiding Principles \ud83c\uddfa\ud83c\uddf8"},{"location":"#general-guidance-your-tech-boot-camp-field-manual","text":"Maintain high standards in your code, soldier! Use GitHub's code review system like a buddy check before a jump \u2013 it ensures your code is mission-ready. Quality over speed, trooper. A well-planned assault beats a hasty advance. Craft your code with precision. Focus on one objective at a time. Use GitHub Projects like a mission board to prioritize your targets. Communication is key in our distributed unit. Use GitHub's wiki as your field manual, discussions for intel sharing, and issues to log mission objectives. K.I.S.S. - Keep It Simple, Soldier! Deploy basic, working solutions first. Use branches like you'd use different formations \u2013 test new maneuvers before integrating them into the main force. Stick to the mission parameters. If new intel comes in, create a new GitHub issue instead of changing the current mission objectives. Advance in small, tactical moves. Use GitHub releases to deploy frequent, incremental updates. Remember, inch by inch, anything's a cinch! Keep your squad informed. Update GitHub issues and pull requests like you'd update your team on the field. Clear intel keeps the unit aligned. Report bugs like you'd call in artillery \u2013 use GitHub issues with clear coordinates (steps to reproduce) and terrain details (code snippets or screenshots). We're all in this together, soldiers. The entire codebase is our base camp \u2013 we all have a duty to maintain and improve it. Use GitHub Actions like your automated supply line \u2013 it ensures your code is always ready for deployment. Standardize your approach with GitHub's templates. They're like field-tested battle plans \u2013 use them to make everyone's mission easier. Remember, troops: these tools are your high-tech gear. They turn our distributed unit into a lean, mean, coding machine. Master them, and you'll be debugging like a pro and deploying code like a seasoned cyber warrior in no time. Stay frosty, keep coding, and let's show them what Vets Who Code can do! HUA! \ud83c\uddfa\ud83c\uddf8","title":"General Guidance: Your Tech Boot Camp Field Manual \ud83c\uddfa\ud83c\uddf8"}]}